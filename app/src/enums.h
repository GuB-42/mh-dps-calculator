#ifndef enums_h_
#define enums_h_

#include <QMetaType>

enum StatusType {
	STATUS_POISON,
	STATUS_PARALYSIS,
	STATUS_SLEEP,
	STATUS_STUN,
	STATUS_BLAST,
	STATUS_EXHAUST,
	STATUS_MOUNT,
	STATUS_COUNT
};
const char *toString(StatusType t);

enum ElementType {
	ELEMENT_FIRE,
	ELEMENT_THUNDER,
	ELEMENT_ICE,
	ELEMENT_DRAGON,
	ELEMENT_WATER,
	ELEMENT_COUNT
};
const char *toString(ElementType t);

enum NormalBuff {
	BUFF_ATTACK_PLUS,
	BUFF_ATTACK_MULTIPLIER,
	BUFF_AFFINITY_PLUS,
	BUFF_ALL_ELEMENTS_PLUS,
	BUFF_ALL_ELEMENTS_MULTIPLIER,
	BUFF_ALL_STATUSES_PLUS,
	BUFF_ALL_STATUSES_MULTIPLIER,
	BUFF_AWAKENING,
	BUFF_SHARPNESS_PLUS,
	BUFF_MAX_SHARPNESS_TIME,
	BUFF_SHARPNESS_USE_MULTIPLIER,
	BUFF_SHARPNESS_USE_CRITICAL_MULTIPLIER,
	BUFF_PUNISHING_DRAW,
	BUFF_STUN_MULTIPLIER,
	BUFF_EXHAUST_MULTIPLIER,
	BUFF_MOUNT_MULTIPLIER,
	BUFF_ARTILLERY_MULTIPLIER,
	BUFF_RAW_CRITICAL_HIT_MULTIPLIER,
	BUFF_ELEMENT_CRITICAL_HIT_MULTIPLIER,
	BUFF_STATUS_CRITICAL_HIT_MULTIPLIER,
	BUFF_MINDS_EYE,
	BUFF_ATTACK_PLUS_BEFORE,
	NORMAL_BUFF_COUNT
};
const char *toString(NormalBuff b);

enum ElementBuff {
	BUFF_ELEMENT_PLUS,
	BUFF_ELEMENT_MULTIPLIER,
	ELEMENT_BUFF_COUNT
};
const char *toString(ElementBuff b);

enum StatusBuff {
	BUFF_STATUS_PLUS,
	BUFF_STATUS_MULTIPLIER,
	STATUS_BUFF_COUNT
};
const char *toString(StatusBuff b);

enum Condition {
	CONDITION_ALWAYS,
	CONDITION_ENRAGED,
	CONDITION_WEAK_SPOT,
	CONDITION_RAW_WEAPON,
	CONDITION_DRAW_ATTACK,
	CONDITION_AIRBORNE,
	CONDITION_RED_LIFE,
	CONDITION_FULL_LIFE,
	CONDITION_LOW_LIFE,
	CONDITION_DEATH_1,
	CONDITION_DEATH_2,
	CONDITION_FULL_STAMINA,
	CONDITION_SLIDING,
	CONDITION_RECEIVED_DAMAGE,
	CONDITION_DEMON_POWDER_USE,
	CONDITION_MIGHT_SEED_USE,
	CONDITION_MIGHT_PILL_USE,
	CONDITION_SONG_BASE,
	CONDITION_SONG_ENCORE,
	CONDITION_COUNT
};
const char *toString(Condition c);

enum PhialType {
	PHIAL_NONE,
	PHIAL_ELEMENT,
	PHIAL_IMPACT,
	PHIAL_POWER,
	PHIAL_COUNT
};
const char *toString(PhialType t);

enum SharpnessLevel {
	SHARPNESS_RED,
	SHARPNESS_ORANGE,
	SHARPNESS_YELLOW,
	SHARPNESS_GREEN,
	SHARPNESS_BLUE,
	SHARPNESS_WHITE,
	SHARPNESS_PURPLE,
	SHARPNESS_COUNT
};
const char *toString(SharpnessLevel s);

enum MonsterMode {
	MODE_NORMAL_NORMAL,
	MODE_NORMAL_WEAK_SPOT,
	MODE_ENRAGED_NORMAL,
	MODE_ENRAGED_WEAK_SPOT,
	MODE_COUNT
};
const char *toString(MonsterMode m);

enum Note {
	NOTE_WHITE,
	NOTE_PURPLE,
	NOTE_RED,
	NOTE_BLUE,
	NOTE_GREEN,
	NOTE_YELLOW,
	NOTE_LIGHT_BLUE,
	NOTE_ORANGE,
	NOTE_COUNT
};
const char *toString(Note n);

Q_DECLARE_METATYPE(StatusType);
Q_DECLARE_METATYPE(ElementType);
Q_DECLARE_METATYPE(NormalBuff);
Q_DECLARE_METATYPE(ElementBuff);
Q_DECLARE_METATYPE(StatusBuff);
Q_DECLARE_METATYPE(Condition);
Q_DECLARE_METATYPE(PhialType);
Q_DECLARE_METATYPE(SharpnessLevel);
Q_DECLARE_METATYPE(MonsterMode);
Q_DECLARE_METATYPE(Note);

#endif
