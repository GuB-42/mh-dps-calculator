#############################################################################
# Makefile for building: mh_dps
# Generated by qmake (2.01a) (Qt 4.8.7) on: Sat Mar 10 16:19:34 2018
# Project:  mh_dps.pro
# Template: app
# Command: /usr/lib/x86_64-linux-gnu/qt4/bin/qmake -o Makefile mh_dps.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -m64 -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++-64 -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtXml -I/usr/include/qt4 -I.
LINK          = g++
LFLAGS        = -m64
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -lQtXml -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/lib/x86_64-linux-gnu/qt4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = src/BuffGroup.cpp \
		src/BuffWithCondition.cpp \
		src/ConditionRatios.cpp \
		src/Constants.cpp \
		src/DamageData.cpp \
		src/FoldedBuffs.cpp \
		src/Item.cpp \
		src/MainData.cpp \
		src/MhDpsApplication.cpp \
		src/Monster.cpp \
		src/NamedObject.cpp \
		src/Profile.cpp \
		src/Weapon.cpp \
		src/enums.cpp \
		src/main.cpp moc_MhDpsApplication.cpp
OBJECTS       = BuffGroup.o \
		BuffWithCondition.o \
		ConditionRatios.o \
		Constants.o \
		DamageData.o \
		FoldedBuffs.o \
		Item.o \
		MainData.o \
		MhDpsApplication.o \
		Monster.o \
		NamedObject.o \
		Profile.o \
		Weapon.o \
		enums.o \
		main.o \
		moc_MhDpsApplication.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		mh_dps.pro
QMAKE_TARGET  = mh_dps
DESTDIR       = 
TARGET        = mh_dps

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)
	{ test -n "$(DESTDIR)" && DESTDIR="$(DESTDIR)" || DESTDIR=.; } && test $$(gdb --version | sed -e 's,[^0-9][^0-9]*\([0-9]\)\.\([0-9]\).*,\1\2,;q') -gt 72 && gdb --nx --batch --quiet -ex 'set confirm off' -ex "save gdb-index $$DESTDIR" -ex quit '$(TARGET)' && test -f $(TARGET).gdb-index && objcopy --add-section '.gdb_index=$(TARGET).gdb-index' --set-section-flags '.gdb_index=readonly' '$(TARGET)' '$(TARGET)' && rm -f $(TARGET).gdb-index || true

Makefile: mh_dps.pro  /usr/share/qt4/mkspecs/linux-g++-64/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtXml.prl \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile mh_dps.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtXml.prl:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile mh_dps.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/mh_dps1.0.0 || $(MKDIR) .tmp/mh_dps1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/mh_dps1.0.0/ && $(COPY_FILE) --parents src/BuffGroup.h src/BuffWithCondition.h src/ConditionRatios.h src/Constants.h src/DamageData.h src/FoldedBuffs.h src/Item.h src/MainData.h src/MhDpsApplication.h src/Monster.h src/NamedObject.h src/Profile.h src/Weapon.h src/enums.h .tmp/mh_dps1.0.0/ && $(COPY_FILE) --parents src/BuffGroup.cpp src/BuffWithCondition.cpp src/ConditionRatios.cpp src/Constants.cpp src/DamageData.cpp src/FoldedBuffs.cpp src/Item.cpp src/MainData.cpp src/MhDpsApplication.cpp src/Monster.cpp src/NamedObject.cpp src/Profile.cpp src/Weapon.cpp src/enums.cpp src/main.cpp .tmp/mh_dps1.0.0/ && (cd `dirname .tmp/mh_dps1.0.0` && $(TAR) mh_dps1.0.0.tar mh_dps1.0.0 && $(COMPRESS) mh_dps1.0.0.tar) && $(MOVE) `dirname .tmp/mh_dps1.0.0`/mh_dps1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/mh_dps1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_MhDpsApplication.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_MhDpsApplication.cpp
moc_MhDpsApplication.cpp: src/MhDpsApplication.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) src/MhDpsApplication.h -o moc_MhDpsApplication.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

BuffGroup.o: src/BuffGroup.cpp src/BuffGroup.h \
		src/NamedObject.h \
		src/BuffWithCondition.h \
		src/enums.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BuffGroup.o src/BuffGroup.cpp

BuffWithCondition.o: src/BuffWithCondition.cpp src/BuffWithCondition.h \
		src/enums.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BuffWithCondition.o src/BuffWithCondition.cpp

ConditionRatios.o: src/ConditionRatios.cpp src/ConditionRatios.h \
		src/enums.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ConditionRatios.o src/ConditionRatios.cpp

Constants.o: src/Constants.cpp src/Constants.h \
		src/enums.h \
		src/ConditionRatios.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Constants.o src/Constants.cpp

DamageData.o: src/DamageData.cpp src/DamageData.h \
		src/enums.h \
		src/FoldedBuffs.h \
		src/Weapon.h \
		src/NamedObject.h \
		src/Profile.h \
		src/Constants.h \
		src/ConditionRatios.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o DamageData.o src/DamageData.cpp

FoldedBuffs.o: src/FoldedBuffs.cpp src/FoldedBuffs.h \
		src/enums.h \
		src/BuffWithCondition.h \
		src/ConditionRatios.h \
		src/Constants.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o FoldedBuffs.o src/FoldedBuffs.cpp

Item.o: src/Item.cpp src/Item.h \
		src/NamedObject.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Item.o src/Item.cpp

MainData.o: src/MainData.cpp src/MainData.h \
		src/Monster.h \
		src/enums.h \
		src/NamedObject.h \
		src/Weapon.h \
		src/BuffGroup.h \
		src/Profile.h \
		src/Item.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o MainData.o src/MainData.cpp

MhDpsApplication.o: src/MhDpsApplication.cpp src/MhDpsApplication.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o MhDpsApplication.o src/MhDpsApplication.cpp

Monster.o: src/Monster.cpp src/Monster.h \
		src/enums.h \
		src/NamedObject.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Monster.o src/Monster.cpp

NamedObject.o: src/NamedObject.cpp src/NamedObject.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o NamedObject.o src/NamedObject.cpp

Profile.o: src/Profile.cpp src/Profile.h \
		src/NamedObject.h \
		src/enums.h \
		src/Constants.h \
		src/ConditionRatios.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Profile.o src/Profile.cpp

Weapon.o: src/Weapon.cpp src/Weapon.h \
		src/enums.h \
		src/NamedObject.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Weapon.o src/Weapon.cpp

enums.o: src/enums.cpp src/enums.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o enums.o src/enums.cpp

main.o: src/main.cpp src/MhDpsApplication.h \
		src/Weapon.h \
		src/enums.h \
		src/NamedObject.h \
		src/Profile.h \
		src/FoldedBuffs.h \
		src/DamageData.h \
		src/MainData.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o src/main.cpp

moc_MhDpsApplication.o: moc_MhDpsApplication.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_MhDpsApplication.o moc_MhDpsApplication.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

